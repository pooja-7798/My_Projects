query the movies collection to
-----------------------------------------------------
get all documents

=> db.movies.find()

  Output -
   {
    "_id" : ObjectId("6544eb687459444d9dcc103b"),
    "title" : "Fight Club",
    "writer" : "Chuck Palahniuk",
    "year" : NumberInt(1999),
    "actors" : [
        "Brad Pitt",
        "Edward Norton"
    ]
}
{
    "_id" : ObjectId("6544eb687459444d9dcc103c"),
    "title" : "Pulp Fiction",
    "writer" : "Quentin Tarantino",
    "year" : NumberInt(1994),
    "actors" : [
        "John Travolta",
        "Uma Thurman"
    ]
}
{
    "_id" : ObjectId("6544eb687459444d9dcc103d"),
    "title" : "Inglorious Basterds",
    "writer" : "Quentin Tarantino",
    "year" : NumberInt(2009),
    "actors" : [
        "Brad Pitt",
        "Diane Kruger",
        "Eli Roth"
    ]
}
{
    "_id" : ObjectId("6544eb687459444d9dcc103e"),
    "title" : "The Hobbit: An Unexpected Journey",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2012),
    "franchise" : "The Hobbit"
}
{
    "_id" : ObjectId("6544eb687459444d9dcc103f"),
    "title" : "The Hobbit: The Desolation of Smaug",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2013),
    "franchise" : "The Hobbit"
}
{
    "_id" : ObjectId("6544eb687459444d9dcc1040"),
    "title" : "The Hobbit: The Battle of the Five Armies",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2012),
    "franchise" : "The Hobbit",
    "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
}
{
    "_id" : ObjectId("6544eb687459444d9dcc1041"),
    "title" : "Pee Wee Herman's Big Adventure"
}
{
    "_id" : ObjectId("6544eb687459444d9dcc1042"),
    "title" : "Avatar"
}

get all documents with writer set to "Quentin Tarantino"

=> db.movies.find({
     writer : "Quentin Tarantino"
    })
 Output -
   {
    "_id" : ObjectId("6544eb687459444d9dcc103c"),
    "title" : "Pulp Fiction",
    "writer" : "Quentin Tarantino",
    "year" : NumberInt(1994),
    "actors" : [
        "John Travolta",
        "Uma Thurman"
    ]
}
{
    "_id" : ObjectId("6544eb687459444d9dcc103d"),
    "title" : "Inglorious Basterds",
    "writer" : "Quentin Tarantino",
    "year" : NumberInt(2009),
    "actors" : [
        "Brad Pitt",
        "Diane Kruger",
        "Eli Roth"
    ]
}
 
get all documents where actors include "Brad Pitt"

=> db.movies.find({
    actors: {
        $in: ["Brad Pitt"]
    }
})
 Output -
  {
    "_id" : ObjectId("6544eb687459444d9dcc103b"),
    "title" : "Fight Club",
    "writer" : "Chuck Palahniuk",
    "year" : NumberInt(1999),
    "actors" : [
        "Brad Pitt",
        "Edward Norton"
    ]
}
{
    "_id" : ObjectId("6544eb687459444d9dcc103d"),
    "title" : "Inglorious Basterds",
    "writer" : "Quentin Tarantino",
    "year" : NumberInt(2009),
    "actors" : [
        "Brad Pitt",
        "Diane Kruger",
        "Eli Roth"
    ]
}

get all documents with franchise set to "The Hobbit"

=> db.movies.find({
    franchise : "The Hobbit"
})

  Output -
   {
    "_id" : ObjectId("6544eb687459444d9dcc103e"),
    "title" : "The Hobbit: An Unexpected Journey",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2012),
    "franchise" : "The Hobbit"
}
{
    "_id" : ObjectId("6544eb687459444d9dcc103f"),
    "title" : "The Hobbit: The Desolation of Smaug",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2013),
    "franchise" : "The Hobbit"
}
{
    "_id" : ObjectId("6544eb687459444d9dcc1040"),
    "title" : "The Hobbit: The Battle of the Five Armies",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2012),
    "franchise" : "The Hobbit",
    "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
}

get all movies released in the 90s

=> db.movies.find({
    year: {
        $gte: 1990,
        $lt: 2000
    }
})

Output -
 {
    "_id" : ObjectId("6544eb687459444d9dcc103b"),
    "title" : "Fight Club",
    "writer" : "Chuck Palahniuk",
    "year" : NumberInt(1999),
    "actors" : [
        "Brad Pitt",
        "Edward Norton"
    ]
}
{
    "_id" : ObjectId("6544eb687459444d9dcc103c"),
    "title" : "Pulp Fiction",
    "writer" : "Quentin Tarantino",
    "year" : NumberInt(1994),
    "actors" : [
        "John Travolta",
        "Uma Thurman"
    ]
}

get all movies released before the year 2000 or after 2010

=> db.movies.find({
    $or: [
        { year: { $lt: 2000 } },   
        { year: { $gt: 2010 } }  
    ]
})

Output -

 {
    "_id" : ObjectId("6544eb687459444d9dcc103b"),
    "title" : "Fight Club",
    "writer" : "Chuck Palahniuk",
    "year" : NumberInt(1999),
    "actors" : [
        "Brad Pitt",
        "Edward Norton"
    ]
}
{
    "_id" : ObjectId("6544eb687459444d9dcc103c"),
    "title" : "Pulp Fiction",
    "writer" : "Quentin Tarantino",
    "year" : NumberInt(1994),
    "actors" : [
        "John Travolta",
        "Uma Thurman"
    ]
}
{
    "_id" : ObjectId("6544eb687459444d9dcc103e"),
    "title" : "The Hobbit: An Unexpected Journey",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2012),
    "franchise" : "The Hobbit"
}
{
    "_id" : ObjectId("6544eb687459444d9dcc103f"),
    "title" : "The Hobbit: The Desolation of Smaug",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2013),
    "franchise" : "The Hobbit"
}
{
    "_id" : ObjectId("6544eb687459444d9dcc1040"),
    "title" : "The Hobbit: The Battle of the Five Armies",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2012),
    "franchise" : "The Hobbit",
    "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
}


Update Documents
----------------------------------
add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."

=> db.movies.updateOne(
   { title: "The Hobbit: An Unexpected Journey" },
   {
     $set: { synopsis: "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." }
   }
)

db.movies.find({title : "The Hobbit: An Unexpected Journey"})

 Output -
   {
    "_id" : ObjectId("654601f1a2108f38f5b44073"),
    "title" : "The Hobbit: An Unexpected Journey",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2012),
    "franchise" : "The Hobbit",
    "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
}

add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."

=> db.movies.updateOne(
   { title: "The Hobbit: The Desolation of Smaug" },
   {
     $set: { synopsis: "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }
   }
)

db.movies.find({title : "The Hobbit: The Desolation of Smaug"})

 Output - 
  {
    "_id" : ObjectId("6544eb687459444d9dcc103f"),
    "title" : "The Hobbit: The Desolation of Smaug",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2013),
    "franchise" : "The Hobbit",
    "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
}

add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction"

=> db.movies.updateOne(
   { title: "Pulp Fiction" },
   {
     $addToSet: {
       actors: "Samuel L. Jackson"
     }
   }
)

 Output - 
  {
    "_id" : ObjectId("6544ec017459444d9dcc1044"),
    "title" : "Pulp Fiction",
    "writer" : "Quentin Tarantino",
    "year" : NumberInt(1994),
    "actors" : [
        "John Travolta",
        "Uma Thurman",
        "Samuel L. Jackson"
    ]
}


Text Search
---------------------------------
find all movies that have a synopsis that contains the word "Bilbo"

=> db.movies.find({
    synopsis: {
        $regex: "\\bBilbo\\b"
    }
})

Output -
 {
    "_id" : ObjectId("6544eb687459444d9dcc103f"),
    "title" : "The Hobbit: The Desolation of Smaug",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2013),
    "franchise" : "The Hobbit",
    "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
}
{
    "_id" : ObjectId("6544eb687459444d9dcc1040"),
    "title" : "The Hobbit: The Battle of the Five Armies",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2012),
    "franchise" : "The Hobbit",
    "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
}
{
    "_id" : ObjectId("654601f1a2108f38f5b44073"),
    "title" : "The Hobbit: An Unexpected Journey",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2012),
    "franchise" : "The Hobbit",
    "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
}

find all movies that have a synopsis that contains the word "Gandalf"

=> db.movies.find({
    synopsis: {
        $regex: "\\bGandalf\\b"
    }
})

Output -
 {
    "_id" : ObjectId("6544eb687459444d9dcc103f"),
    "title" : "The Hobbit: The Desolation of Smaug",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2013),
    "franchise" : "The Hobbit",
    "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
}

find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf"

=> db.movies.find({
    $and: [
        { synopsis: { $regex: "\\bBilbo\\b", $options: "i" } },  // Matches documents containing the word "Bilbo"
        { synopsis: { $not: { $regex: "\\bGandalf\\b", $options: "i" } } }  // Excludes documents containing the word "Gandalf"
    ]
})

Output -
 {
    "_id" : ObjectId("6544eb687459444d9dcc1040"),
    "title" : "The Hobbit: The Battle of the Five Armies",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2012),
    "franchise" : "The Hobbit",
    "synopsis" : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness."
}

find all movies that have a synopsis that contains the word "dwarves" or "hobbit"

=> db.movies.find({
    $or: [
        { synopsis: { $regex: "\\bdwarves\\b"} },
        { synopsis: { $regex: "\\bhobbit\\b"} }
    ]
})

Output -
 {
    "_id" : ObjectId("6544eb687459444d9dcc103f"),
    "title" : "The Hobbit: The Desolation of Smaug",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2013),
    "franchise" : "The Hobbit",
    "synopsis" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring."
}
{
    "_id" : ObjectId("654601f1a2108f38f5b44073"),
    "title" : "The Hobbit: An Unexpected Journey",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2012),
    "franchise" : "The Hobbit",
    "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
}

find all movies that have a synopsis that contains the word "gold" and "dragon"

=> db.movies.find({
    $and: [
        { synopsis: { $regex: "\\bgold\\b"} },
        { synopsis: { $regex: "\\bdragon\\b"} }
    ]
})

Output -
 {
    "_id" : ObjectId("654601f1a2108f38f5b44073"),
    "title" : "The Hobbit: An Unexpected Journey",
    "writer" : "J.R.R. Tolkein",
    "year" : NumberInt(2012),
    "franchise" : "The Hobbit",
    "synopsis" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug."
}


Delete Documents
-------------------------------
delete the movie "Pee Wee Herman's Big Adventure"

=> db.movies.deleteOne({
      title : "Pee Wee Herman's Big Adventure"})

delete the movie "Avatar"

=> db.movies.deleteOne({
      title : "Avatar"})

----------------------------------------------
Querying related collections  - users collection
----------------------------------------------
find all users

=> db.users.find()

Output -
 {
    "_id" : ObjectId("6544ed427459444d9dcc104b"),
    "username" : "GoodGuyGreg",
    "first_name" : "Good Guy",
    "last_name" : "Greg"
}
{
    "_id" : ObjectId("6544ed427459444d9dcc104c"),
    "username" : "ScumbagSteve",
    "full_name" : {
        "first" : "Scumbag",
        "last" : "Steve"
    }
}

find all posts

=> db.posts.find()

Output -
 {
    "_id" : NumberInt(1),
    "username" : "GoodGuyGreg",
    "title" : "Passes out at party",
    "body" : "Wakes up early and cleans house"
}
{
    "_id" : NumberInt(2),
    "username" : "GoodGuyGreg",
    "title" : "Steals your identity",
    "body" : "Raises your credit score"
}
{
    "_id" : NumberInt(3),
    "username" : "GoodGuyGreg",
    "title" : "Reports a bug in your code",
    "body" : "Sends you a Pull Request"
}
{
    "_id" : NumberInt(4),
    "username" : "ScumbagSteve",
    "title" : "Borrows something",
    "body" : "Sells it"
}
{
    "_id" : NumberInt(5),
    "username" : "ScumbagSteve",
    "title" : "Borrows everything",
    "body" : "The end"
}
{
    "_id" : NumberInt(6),
    "username" : "ScumbagSteve",
    "title" : "Forks your repo on github",
    "body" : "Sets to private"
}

find all posts that was authored by "GoodGuyGreg"

=> db.posts.find({username : "GoodGuyGreg"})

Output -
 {
    "_id" : NumberInt(1),
    "username" : "GoodGuyGreg",
    "title" : "Passes out at party",
    "body" : "Wakes up early and cleans house"
}
{
    "_id" : NumberInt(2),
    "username" : "GoodGuyGreg",
    "title" : "Steals your identity",
    "body" : "Raises your credit score"
}
{
    "_id" : NumberInt(3),
    "username" : "GoodGuyGreg",
    "title" : "Reports a bug in your code",
    "body" : "Sends you a Pull Request"
}


find all posts that was authored by "ScumbagSteve"

=> db.posts.find({username : "ScumbagSteve"})

Output -
 {
    "_id" : NumberInt(4),
    "username" : "ScumbagSteve",
    "title" : "Borrows something",
    "body" : "Sells it"
}
{
    "_id" : NumberInt(5),
    "username" : "ScumbagSteve",
    "title" : "Borrows everything",
    "body" : "The end"
}
{
    "_id" : NumberInt(6),
    "username" : "ScumbagSteve",
    "title" : "Forks your repo on github",
    "body" : "Sets to private"
}


find all comments

=> db.comments.find()

Output -
 {
    "_id" : ObjectId("6544f0487459444d9dcc104d"),
    "username" : "GoodGuyGreg",
    "comment" : "Hope you got a good deal!",
    "post" : NumberInt(4)
}
{
    "_id" : ObjectId("6544f0487459444d9dcc104e"),
    "username" : "GoodGuyGreg",
    "comment" : "What's mine is yours!",
    "post" : NumberInt(5)
}
{
    "_id" : ObjectId("6544f0487459444d9dcc104f"),
    "username" : "GoodGuyGreg",
    "comment" : "Don't violate the licensing agreement!",
    "post" : NumberInt(6)
}
{
    "_id" : ObjectId("6544f0487459444d9dcc1050"),
    "username" : "ScumbagSteve",
    "comment" : "It still isn't clean",
    "post" : NumberInt(1)
}
{
    "_id" : ObjectId("6544f0487459444d9dcc1051"),
    "username" : "ScumbagSteve",
    "comment" : "Denied your PR cause I found a hack",
    "post" : NumberInt(3)
}

find all comments that was authored by "GoodGuyGreg"

=> db.comments.find({username : "GoodGuyGreg"})

Output -
 {
    "_id" : ObjectId("6544f0487459444d9dcc104d"),
    "username" : "GoodGuyGreg",
    "comment" : "Hope you got a good deal!",
    "post" : NumberInt(4)
}
{
    "_id" : ObjectId("6544f0487459444d9dcc104e"),
    "username" : "GoodGuyGreg",
    "comment" : "What's mine is yours!",
    "post" : NumberInt(5)
}
{
    "_id" : ObjectId("6544f0487459444d9dcc104f"),
    "username" : "GoodGuyGreg",
    "comment" : "Don't violate the licensing agreement!",
    "post" : NumberInt(6)
}

find all comments that was authored by "ScumbagSteve"

=> db.comments.find({username : "ScumbagSteve"})

Output -
 {
    "_id" : ObjectId("6544f0487459444d9dcc1050"),
    "username" : "ScumbagSteve",
    "comment" : "It still isn't clean",
    "post" : NumberInt(1)
}
{
    "_id" : ObjectId("6544f0487459444d9dcc1051"),
    "username" : "ScumbagSteve",
    "comment" : "Denied your PR cause I found a hack",
    "post" : NumberInt(3)
}

find all comments belonging to the post "Reports a bug in your code"

=> db.comments.aggregate([
  {
    $lookup: {
      from: "posts",
      localField: "post",
      foreignField: "_id",
      as: "CustomerComment"
    }
  },
  {
    $unwind: "$CustomerComment"
  },
  {
    $match: {
      "CustomerComment.title": "Reports a bug in your code"
    }
  }
])

Output -
 {
    "_id" : ObjectId("6544f0487459444d9dcc1051"),
    "username" : "ScumbagSteve",
    "comment" : "Denied your PR cause I found a hack",
    "post" : NumberInt(3),
    "CustomerComment" : {
        "_id" : NumberInt(3),
        "username" : "GoodGuyGreg",
        "title" : "Reports a bug in your code",
        "body" : "Sends you a Pull Request"
    }
}

